# app.py

import streamlit as st
from utils import load_all_data, semantic_search, keyword_search, filter_by_topics, log_query

st.set_page_config(page_title="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∑ –§–õ", layout="centered")
st.title("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∑")

@st.cache_data(show_spinner=True)
def get_data():
    return load_all_data()

df = get_data()
all_topics = sorted({topic for topics in df['topics'] for topic in topics})

selected_topics = st.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º:", all_topics)

if selected_topics:
    st.markdown("### üìÇ –§—Ä–∞–∑—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞—Ç–∏–∫–∞–º:")
    filtered_df = df[df['topics'].apply(lambda topics: any(t in selected_topics for t in topics))]
    for row in filtered_df.itertuples():
        with st.container():
            st.markdown(
                f"""
                <div style='border: 1px solid #e0e0e0; border-radius: 12px; padding: 16px; margin-bottom: 12px; background-color: #f9f9f9;'>
                    <div style='font-size: 18px; font-weight: 600;'>üìù {row.phrase_full}</div>
                    <div style='font-size: 14px;'>üîñ –¢–µ–º–∞—Ç–∏–∫–∏: <strong>{', '.join(row.topics)}</strong></div>
                </div>
                """,
                unsafe_allow_html=True
            )
            if row.comment and str(row.comment).strip().lower() != "nan":
                with st.expander("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"):
                    st.markdown(row.comment)

query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")

if query:
    try:
        semantic_results = semantic_search(query, df)
        log_query(query, "SEMANTIC", bool(semantic_results))

        if semantic_results:
            st.markdown("### üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫:")
            for score, phrase_full, topics, comment in filter_by_topics(semantic_results, selected_topics):
                with st.container():
                    st.markdown(
                        f"""
                        <div style='border: 1px solid #e0e0e0; border-radius: 12px; padding: 16px; margin-bottom: 12px; background-color: #f9f9f9;'>
                            <div style='font-size: 18px; font-weight: 600;'>üß† {phrase_full}</div>
                            <div style='font-size: 14px;'>üîñ –¢–µ–º–∞—Ç–∏–∫–∏: <strong>{', '.join(topics)}</strong></div>
                            <div style='font-size: 13px;'>üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f}</div>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                    if comment and str(comment).strip().lower() != "nan":
                        with st.expander("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"):
                            st.markdown(comment)
        else:
            st.warning("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —É–º–Ω–æ–º –ø–æ–∏—Å–∫–µ.")

        keyword_results = keyword_search(query, df)
        log_query(query, "KEYWORD", bool(keyword_results))

        if keyword_results:
            st.markdown("### üß∑ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫:")
            for phrase_full, topics, comment in filter_by_topics(keyword_results, selected_topics):
                with st.container():
                    st.markdown(
                        f"""
                        <div style='border: 1px solid #e0e0e0; border-radius: 12px; padding: 16px; margin-bottom: 12px; background-color: #f9f9f9;'>
                            <div style='font-size: 18px; font-weight: 600;'>üìå {phrase_full}</div>
                            <div style='font-size: 14px;'>üîñ –¢–µ–º–∞—Ç–∏–∫–∏: <strong>{', '.join(topics)}</strong></div>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                    if comment and str(comment).strip().lower() != "nan":
                        with st.expander("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"):
                            st.markdown(comment)
        else:
            st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ.")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
